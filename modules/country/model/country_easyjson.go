// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson548aff28DecodeAssetsModulesCountryModel(in *jlexer.Lexer, out *Country) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "codeIso":
			out.CodeIso = string(in.String())
		case "shortName":
			out.ShortName = string(in.String())
		case "fullName":
			out.FullName = string(in.String())
		case "charCode2":
			out.CharCode2 = string(in.String())
		case "charCode3":
			out.CharCode3 = string(in.String())
		case "phoneCode":
			out.PhoneCode = string(in.String())
		case "phoneMask":
			out.PhoneMask = string(in.String())
		case "pictogram":
			if in.IsNull() {
				in.Skip()
				out.Pictogram = nil
			} else {
				out.Pictogram = in.Bytes()
			}
		case "cities":
			if in.IsNull() {
				in.Skip()
				out.Cities = nil
			} else {
				in.Delim('[')
				if out.Cities == nil {
					if !in.IsDelim(']') {
						out.Cities = make([]*City, 0, 8)
					} else {
						out.Cities = []*City{}
					}
				} else {
					out.Cities = (out.Cities)[:0]
				}
				for !in.IsDelim(']') {
					var v2 *City
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(City)
						}
						(*v2).UnmarshalEasyJSON(in)
					}
					out.Cities = append(out.Cities, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson548aff28EncodeAssetsModulesCountryModel(out *jwriter.Writer, in Country) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	if in.CodeIso != "" {
		const prefix string = ",\"codeIso\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CodeIso))
	}
	if in.ShortName != "" {
		const prefix string = ",\"shortName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ShortName))
	}
	if in.FullName != "" {
		const prefix string = ",\"fullName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FullName))
	}
	if in.CharCode2 != "" {
		const prefix string = ",\"charCode2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CharCode2))
	}
	if in.CharCode3 != "" {
		const prefix string = ",\"charCode3\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CharCode3))
	}
	if in.PhoneCode != "" {
		const prefix string = ",\"phoneCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PhoneCode))
	}
	if in.PhoneMask != "" {
		const prefix string = ",\"phoneMask\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PhoneMask))
	}
	if len(in.Pictogram) != 0 {
		const prefix string = ",\"pictogram\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.Pictogram)
	}
	if len(in.Cities) != 0 {
		const prefix string = ",\"cities\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Cities {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Country) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson548aff28EncodeAssetsModulesCountryModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Country) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson548aff28EncodeAssetsModulesCountryModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Country) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson548aff28DecodeAssetsModulesCountryModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Country) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson548aff28DecodeAssetsModulesCountryModel(l, v)
}
