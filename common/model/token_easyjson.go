// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonF041b085DecodeAssetsCommonModel(in *jlexer.Lexer, out *TokenInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userId":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.UserId).UnmarshalText(data))
			}
		case "username":
			out.Username = string(in.String())
		case "firstName":
			out.FirstName = string(in.String())
		case "lastName":
			out.LastName = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "tokenValue":
			out.TokenValue = string(in.String())
		case "roles":
			if in.IsNull() {
				in.Skip()
				out.Roles = nil
			} else {
				in.Delim('[')
				if out.Roles == nil {
					if !in.IsDelim(']') {
						out.Roles = make([]string, 0, 4)
					} else {
						out.Roles = []string{}
					}
				} else {
					out.Roles = (out.Roles)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Roles = append(out.Roles, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "authorities":
			if in.IsNull() {
				in.Skip()
				out.Authorities = nil
			} else {
				in.Delim('[')
				if out.Authorities == nil {
					if !in.IsDelim(']') {
						out.Authorities = make([]string, 0, 4)
					} else {
						out.Authorities = []string{}
					}
				} else {
					out.Authorities = (out.Authorities)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.Authorities = append(out.Authorities, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ati":
			out.ParentId = string(in.String())
		case "aud":
			out.Audience = string(in.String())
		case "exp":
			out.ExpiresAt = int64(in.Int64())
		case "jti":
			out.Id = string(in.String())
		case "iat":
			out.IssuedAt = int64(in.Int64())
		case "iss":
			out.Issuer = string(in.String())
		case "nbf":
			out.NotBefore = int64(in.Int64())
		case "sub":
			out.Subject = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF041b085EncodeAssetsCommonModel(out *jwriter.Writer, in TokenInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"userId\":"
		first = false
		out.RawString(prefix[1:])
		out.RawText((in.UserId).MarshalText())
	}
	if in.Username != "" {
		const prefix string = ",\"username\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Username))
	}
	if in.FirstName != "" {
		const prefix string = ",\"firstName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FirstName))
	}
	if in.LastName != "" {
		const prefix string = ",\"lastName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LastName))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	if in.TokenValue != "" {
		const prefix string = ",\"tokenValue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TokenValue))
	}
	if len(in.Roles) != 0 {
		const prefix string = ",\"roles\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v3, v4 := range in.Roles {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.String(string(v4))
			}
			out.RawByte(']')
		}
	}
	if len(in.Authorities) != 0 {
		const prefix string = ",\"authorities\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Authorities {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	if in.ParentId != "" {
		const prefix string = ",\"ati\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ParentId))
	}
	if in.Audience != "" {
		const prefix string = ",\"aud\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Audience))
	}
	if in.ExpiresAt != 0 {
		const prefix string = ",\"exp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ExpiresAt))
	}
	if in.Id != "" {
		const prefix string = ",\"jti\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	if in.IssuedAt != 0 {
		const prefix string = ",\"iat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.IssuedAt))
	}
	if in.Issuer != "" {
		const prefix string = ",\"iss\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Issuer))
	}
	if in.NotBefore != 0 {
		const prefix string = ",\"nbf\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.NotBefore))
	}
	if in.Subject != "" {
		const prefix string = ",\"sub\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Subject))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TokenInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF041b085EncodeAssetsCommonModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TokenInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF041b085EncodeAssetsCommonModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TokenInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF041b085DecodeAssetsCommonModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TokenInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF041b085DecodeAssetsCommonModel(l, v)
}
